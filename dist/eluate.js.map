{
  "version": 3,
  "sources": ["../src/main.js"],
  "sourcesContent": ["function createObjectProxy(target = {}) {\n  let $instances = [];\n  // special case for $instances used to update the real DOM\n  // TODO: check for cases like nested objects or arrays\n  const proxy = new Proxy(target, {\n    get(target, prop) {\n      if (prop === '$instances') {\n        return $instances;\n      }\n      let result = target[prop];\n      return result;\n    },\n    set(target, prop, value) {\n      if (prop === '$instances') {\n        $instances = value;\n      }\n      target[prop] = value;\n      // update the real DOM, currently only support for text (innerHTML)\n      $instances.forEach(({ $el, prop }) => {\n        $el.innerHTML = target[prop];\n      });\n    },\n  });\n  return proxy;\n}\n\nfunction initElement($el, proxy) {\n  Object.entries($el.dataset).forEach(([name, value]) => {\n    if (name === 'text') {\n      // add the element to the $instances array, so we can update it later when the value changes\n      proxy.$instances.push({ $el, prop: value });\n      $el.innerHTML = proxy[value];\n    } else if (name.startsWith('on:')) {\n      const [, eventName] = name.split(':');\n      // create a new function to handle the event\n      // binded to the proxy so we can use 'this' to access the data\n      const eventHandler = new Function(value).bind(proxy);\n      $el.addEventListener(eventName, eventHandler);\n    }\n  });\n  [...$el.children].forEach(($child) => {\n    initElement($child, proxy);\n  });\n}\n\nfunction initRoot($el, value) {\n  // TODO: find another way to parse the data more like normal js objects\n  //  because currently it only accept JSON\n  const jsonData = JSON.parse(value);\n\n  // create an object proxy to use in data binding\n  const proxy = createObjectProxy(jsonData);\n  [...$el.children].forEach(($child) => {\n    initElement($child, proxy);\n  });\n}\n\n// find element with 'data-set' to initialize the root element of the app\ndocument.querySelectorAll('*').forEach(($el) => {\n  Object.entries($el.dataset).forEach(([name, value]) => {\n    if (name === 'set') {\n      initRoot($el, value);\n    }\n  });\n});\n\n// remove all 'data-*' attributes\n// idk, just to make the html looks cleaner\ndocument.querySelectorAll('*').forEach(($el) => {\n  Object.entries($el.dataset).forEach(([name, _]) => {\n    delete $el.dataset[name];\n  });\n});\n"],
  "mappings": "MAAA,WAA2B,EAAS,CAAC,EAAG,CACtC,GAAI,GAAa,CAAC,EAsBlB,MAnBc,IAAI,OAAM,EAAQ,CAC9B,IAAI,EAAQ,EAAM,CAChB,MAAI,KAAS,aACJ,EAEI,EAAO,EAEtB,EACA,IAAI,EAAQ,EAAM,EAAO,CACvB,AAAI,IAAS,cACX,GAAa,GAEf,EAAO,GAAQ,EAEf,EAAW,QAAQ,CAAC,CAAE,MAAK,UAAW,CACpC,EAAI,UAAY,EAAO,EACzB,CAAC,CACH,CACF,CAAC,CAEH,CAEA,WAAqB,EAAK,EAAO,CAC/B,OAAO,QAAQ,EAAI,OAAO,EAAE,QAAQ,CAAC,CAAC,EAAM,KAAW,CACrD,GAAI,IAAS,OAEX,EAAM,WAAW,KAAK,CAAE,MAAK,KAAM,CAAM,CAAC,EAC1C,EAAI,UAAY,EAAM,WACb,EAAK,WAAW,KAAK,EAAG,CACjC,GAAM,CAAC,CAAE,GAAa,EAAK,MAAM,GAAG,EAG9B,EAAe,GAAI,UAAS,CAAK,EAAE,KAAK,CAAK,EACnD,EAAI,iBAAiB,EAAW,CAAY,CAC9C,CACF,CAAC,EACD,CAAC,GAAG,EAAI,QAAQ,EAAE,QAAQ,AAAC,GAAW,CACpC,EAAY,EAAQ,CAAK,CAC3B,CAAC,CACH,CAEA,WAAkB,EAAK,EAAO,CAG5B,GAAM,GAAW,KAAK,MAAM,CAAK,EAG3B,EAAQ,EAAkB,CAAQ,EACxC,CAAC,GAAG,EAAI,QAAQ,EAAE,QAAQ,AAAC,GAAW,CACpC,EAAY,EAAQ,CAAK,CAC3B,CAAC,CACH,CAGA,SAAS,iBAAiB,GAAG,EAAE,QAAQ,AAAC,GAAQ,CAC9C,OAAO,QAAQ,EAAI,OAAO,EAAE,QAAQ,CAAC,CAAC,EAAM,KAAW,CACrD,AAAI,IAAS,OACX,EAAS,EAAK,CAAK,CAEvB,CAAC,CACH,CAAC,EAID,SAAS,iBAAiB,GAAG,EAAE,QAAQ,AAAC,GAAQ,CAC9C,OAAO,QAAQ,EAAI,OAAO,EAAE,QAAQ,CAAC,CAAC,EAAM,KAAO,CACjD,MAAO,GAAI,QAAQ,EACrB,CAAC,CACH,CAAC",
  "names": []
}
